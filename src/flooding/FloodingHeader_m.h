//
// Generated file, do not edit! Created by nedtool 5.6 from flooding/FloodingHeader.msg.
//

#ifndef __FLOODINGHEADER_M_H
#define __FLOODINGHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <inet/common/packet/chunk/FieldsChunk.h>
#include <inet/linklayer/common/MacAddress.h>
typedef inet::FieldsChunk FieldsChunk;
typedef inet::MacAddress MacAddress;
// }}

/**
 * Class generated from <tt>flooding/FloodingHeader.msg:28</tt> by nedtool.
 * <pre>
 * class FloodingHeader extends FieldsChunk
 * {
 *     uint16_t magicNo;
 *     uint16_t floodingVersion;
 *     uint16_t timeToLive;
 *     uint32_t seqno;         // sequence number
 *     MacAddress sourceId;      // Mac address of original source, used as sender id
 * }
 * </pre>
 */
class FloodingHeader : public ::FieldsChunk
{
  protected:
    uint16_t magicNo;
    uint16_t floodingVersion;
    uint16_t timeToLive;
    uint32_t seqno;
    MacAddress sourceId;

  private:
    void copy(const FloodingHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FloodingHeader&);

  public:
    FloodingHeader();
    FloodingHeader(const FloodingHeader& other);
    virtual ~FloodingHeader();
    FloodingHeader& operator=(const FloodingHeader& other);
    virtual FloodingHeader *dup() const override {return new FloodingHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getMagicNo() const;
    virtual void setMagicNo(uint16_t magicNo);
    virtual uint16_t getFloodingVersion() const;
    virtual void setFloodingVersion(uint16_t floodingVersion);
    virtual uint16_t getTimeToLive() const;
    virtual void setTimeToLive(uint16_t timeToLive);
    virtual uint32_t getSeqno() const;
    virtual void setSeqno(uint32_t seqno);
    virtual MacAddress& getSourceId();
    virtual const MacAddress& getSourceId() const {return const_cast<FloodingHeader*>(this)->getSourceId();}
    virtual void setSourceId(const MacAddress& sourceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FloodingHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FloodingHeader& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLOODINGHEADER_M_H

