//
// Generated file, do not edit! Created by nedtool 5.6 from beaconing/base/BeaconReport.msg.
//

#ifndef __BEACONREPORT_M_H
#define __BEACONREPORT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <inet/common/geometry/common/Coord.h>
#include <inet/linklayer/common/MacAddress.h>
#include "../renewalbeaconing/Nbt.h"
typedef inet::Coord Coord;
typedef inet::MacAddress MacAddress;
typedef std::list<Nbt> Nnbt;
// }}

/**
 * Class generated from <tt>beaconing/base/BeaconReport.msg:30</tt> by nedtool.
 * <pre>
 * message BeaconReport
 * {
 *     uint32_t seqno;           // sequence number
 *     MacAddress senderId;        // Mac address of sender, used as sender id
 *     Coord senderPosition;  // current position in given coordinate system
 *     Coord senderVelocity;
 *     Nnbt nnbt;
 *     int currI;
 *     int currJ;
 *     string currentRoadId;
 *     double currT;
 * }
 * </pre>
 */
class BeaconReport : public ::omnetpp::cMessage
{
  protected:
    uint32_t seqno;
    MacAddress senderId;
    Coord senderPosition;
    Coord senderVelocity;
    Nnbt nnbt;
    int currI;
    int currJ;
    ::omnetpp::opp_string currentRoadId;
    double currT;

  private:
    void copy(const BeaconReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconReport&);

  public:
    BeaconReport(const char *name=nullptr, short kind=0);
    BeaconReport(const BeaconReport& other);
    virtual ~BeaconReport();
    BeaconReport& operator=(const BeaconReport& other);
    virtual BeaconReport *dup() const override {return new BeaconReport(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getSeqno() const;
    virtual void setSeqno(uint32_t seqno);
    virtual MacAddress& getSenderId();
    virtual const MacAddress& getSenderId() const {return const_cast<BeaconReport*>(this)->getSenderId();}
    virtual void setSenderId(const MacAddress& senderId);
    virtual Coord& getSenderPosition();
    virtual const Coord& getSenderPosition() const {return const_cast<BeaconReport*>(this)->getSenderPosition();}
    virtual void setSenderPosition(const Coord& senderPosition);
    virtual Coord& getSenderVelocity();
    virtual const Coord& getSenderVelocity() const {return const_cast<BeaconReport*>(this)->getSenderVelocity();}
    virtual void setSenderVelocity(const Coord& senderVelocity);
    virtual Nnbt& getNnbt();
    virtual const Nnbt& getNnbt() const {return const_cast<BeaconReport*>(this)->getNnbt();}
    virtual void setNnbt(const Nnbt& nnbt);
    virtual int getCurrI() const;
    virtual void setCurrI(int currI);
    virtual int getCurrJ() const;
    virtual void setCurrJ(int currJ);
    virtual const char * getCurrentRoadId() const;
    virtual void setCurrentRoadId(const char * currentRoadId);
    virtual double getCurrT() const;
    virtual void setCurrT(double currT);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BeaconReport& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BeaconReport& obj) {obj.parsimUnpack(b);}


#endif // ifndef __BEACONREPORT_M_H

