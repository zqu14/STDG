//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package swarmstack;

import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;
import inet.networklayer.common.InterfaceTable;

import swarmstack.beaconing.renewalbeaconing.RenewalBeaconingNodeSafety;
import swarmstack.arrivalCheck.ArrivalChecker;
import swarmstack.roadReader.XMLRoadReader;
import swarmstack.roadSystem.RoadSystem;

import inet.physicallayer.ieee80211.packetlevel.Ieee80211ScalarRadioMedium;
import inet.visualizer.contract.IIntegratedVisualizer;
import inet.common.scenario.ScenarioManager;
import inet.visualizer.integrated.IntegratedVisualizer;
import swarmstack.beaconing.renewalbeaconing.NodeGenerator2;

network RenewalGenerating
{
    parameters:
        
        
        double  deploymentRadiusMeter @unit(m)    =  default(1.25m);
        double  laneRadiusMeter @unit(m)    =  default(1m);
        double  constrainRadiusMeter @unit(m)    =  default(1000m);
        double  minimumSafetyDistance  @unit(m)  =  default(0.5mm);

		string fileDir;

        int numNodes = default(100);
        @display("bgb=3000,3000");
        nodes[*].wlan[0].radio.typename = "Ieee80211ScalarRadio";
        nodes[*].wlan[0].radio.transmitter.power = default(0.01W);
        nodes[*].**.bitrate = 12Mbps;
        nodes[*].wlan[0].radio.displayCommunicationRange = false;
        nodes[*].wlan[0].radio.displayInterferenceRange = false;
        nodes[*].mobility.numHosts = numNodes;
		nodes[*].p.laneRadiusMeter = laneRadiusMeter;
		nodes[*].p.deploymentRadiusMeter = deploymentRadiusMeter;
		nodes[*].p.minimumSafetyDistance = minimumSafetyDistance;


    submodules:
              
        ac:ArrivalChecker {
            minimumSafetyDistance = minimumSafetyDistance;
            @display("p=10,50;is=s");   
        }

        visualizer: IntegratedVisualizer {
            @display("p=10,10;is=s");
        }


        configurator: Ipv4NetworkConfigurator {
            parameters:
                @display("p=10,20;is=s");
                config = default(xml("<config><interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/></config>"));
                assignAddresses = true;
                addStaticRoutes = false;
                addDefaultRoutes = false;
                addSubnetRoutes = false;
                addDirectRoutes = false;
                optimizeRoutes = false;

        }

        radioMedium: Ieee80211ScalarRadioMedium {
            parameters:
                @display("p=10,30;is=s");
        }

        nodesGenerator: NodeGenerator2 {
            parameters:
                @display("p=10,40;is=s");
                maxNumOfNodes = numNodes;
                centerX = constrainRadiusMeter/2;
           		centerZ = constrainRadiusMeter/2;
            	rparval = deploymentRadiusMeter*sqrt(uniform(0,1));
            	thetaparval = 2*3.1415926536*uniform(0,1);
            	radius = laneRadiusMeter;
                
        }
        
        roadSystem: RoadSystem {
            parameters:
            @display("p=10,30;is=s");
        }
		roadreader: XMLRoadReader {
		 	parameters:
		 	    @display("p=10,30;is=s");
		 	    fileDir = fileDir;   
		}
		
		
		
		
}
