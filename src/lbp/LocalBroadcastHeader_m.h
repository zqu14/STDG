//
// Generated file, do not edit! Created by nedtool 5.6 from lbp/LocalBroadcastHeader.msg.
//

#ifndef __LOCALBROADCASTHEADER_M_H
#define __LOCALBROADCASTHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <inet/common/packet/chunk/FieldsChunk.h>
#include <inet/linklayer/common/MacAddress.h>
typedef inet::FieldsChunk FieldsChunk;
typedef inet::MacAddress MacAddress;
// }}

/**
 * Class generated from <tt>lbp/LocalBroadcastHeader.msg:16</tt> by nedtool.
 * <pre>
 * class LocalBroadcastHeader extends FieldsChunk
 * {
 *     uint16_t magicNo;       // a magic number identifying local broadcasts
 *     uint16_t version;       // version of the local broadcast protocol
 *     uint32_t seqno;         // sequence number
 *     MacAddress senderId;      // Mac address of sender, used as sender id
 * }
 * </pre>
 */
class LocalBroadcastHeader : public ::FieldsChunk
{
  protected:
    uint16_t magicNo;
    uint16_t version;
    uint32_t seqno;
    MacAddress senderId;

  private:
    void copy(const LocalBroadcastHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LocalBroadcastHeader&);

  public:
    LocalBroadcastHeader();
    LocalBroadcastHeader(const LocalBroadcastHeader& other);
    virtual ~LocalBroadcastHeader();
    LocalBroadcastHeader& operator=(const LocalBroadcastHeader& other);
    virtual LocalBroadcastHeader *dup() const override {return new LocalBroadcastHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getMagicNo() const;
    virtual void setMagicNo(uint16_t magicNo);
    virtual uint16_t getVersion() const;
    virtual void setVersion(uint16_t version);
    virtual uint32_t getSeqno() const;
    virtual void setSeqno(uint32_t seqno);
    virtual MacAddress& getSenderId();
    virtual const MacAddress& getSenderId() const {return const_cast<LocalBroadcastHeader*>(this)->getSenderId();}
    virtual void setSenderId(const MacAddress& senderId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LocalBroadcastHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LocalBroadcastHeader& obj) {obj.parsimUnpack(b);}


#endif // ifndef __LOCALBROADCASTHEADER_M_H

